from app.infrastructure.database.database import Base
from app.infrastructure.database.accessor import get_db_session
__all__ = ['get_db_session', 'Base'] # Эти имена будут доступны из этого модуля вне его контекста


# Файл __init__.py в папке Python является важным элементом, делающим эту папку пакетом Python. Помимо этой основной роли, __init__.py часто используется для выполнения нескольких дополнительных задач:

# Инициализация Пакета: Файл __init__.py может содержать код инициализации, который необходимо выполнить при первом импорте пакета. Это может включать настройку логирования, инициализацию подключений к базам данных, предварительную загрузку данных и т.д.
# Организация Пространства Имен: Файл позволяет определить, какие классы, функции и переменные будут доступны, когда модули внутри пакета импортируются. Это важно для больших проектов, где определённая структура и организация пространства имён помогает поддерживать код чистым и понятным.
# Пример использования __init__.py:
# В вашем случае, __init__.py используется для двух основных целей:

# Импорт Классов: Строка from models import Tasks, Catefories импортирует классы Tasks и Catefories из модуля models.py, который находится в той же папке database. Это делает эти классы доступными непосредственно через пакет database. Например, после этого импорта можно делать импорт в других частях проекта таким образом:
# python
# Копировать код
# from database import Tasks, Catefories
# Управление Пространством Имен с __all__:
# Определение списка __all__ в __init__.py служит для указания, какие символы (классы, функции, переменные) будут считаться публичными и доступными при импорте * из пакета. Это полезно для больших пакетов, где вы хотите ограничить то, что доступно пользователям вашего API или библиотеки.
# python
# Копировать код
# # Это позволяет делать такой импорт:
# from database import *
# В результате будут доступны только Tasks и Catefories, а остальные классы и функции из models.py будут скрыты.